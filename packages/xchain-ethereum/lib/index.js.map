{"version":3,"file":"index.js","sources":["../src/types/client-types.ts","../../../node_modules/tslib/tslib.es6.js","../src/ethplorer-api.ts","../src/utils.ts","../src/etherscan-api.ts","../src/client.ts"],"sourcesContent":["import { ethers, BigNumber } from 'ethers'\nimport { BaseAmount } from '@xchainjs/xchain-util'\nimport * as C from '@xchainjs/xchain-client'\nimport { FeeOptionKey } from '@xchainjs/xchain-client'\n\nexport type Address = string\n\nexport enum Network {\n  TEST = 'ropsten',\n  MAIN = 'homestead',\n}\n\nexport type ClientUrl = {\n  testnet: string\n  mainnet: string\n}\n\nexport type ExplorerUrl = {\n  testnet: string\n  mainnet: string\n}\n\nexport type TxOverrides = {\n  nonce?: ethers.BigNumberish\n\n  // mandatory: https://github.com/ethers-io/ethers.js/issues/469#issuecomment-475926538\n  gasLimit: ethers.BigNumberish\n  gasPrice?: ethers.BigNumberish\n  data?: ethers.BytesLike\n  value?: ethers.BigNumberish\n}\n\nexport type InfuraCreds = {\n  projectId: string\n  projectSecret?: string\n}\n\nexport type GasPrices = Record<C.FeeOptionKey, BaseAmount>\n\nexport type FeesParams = C.FeesParams & C.TxParams\n\nexport type FeesWithGasPricesAndLimits = { fees: C.Fees; gasPrices: GasPrices; gasLimit: BigNumber }\n\nexport type ApproveParams = {\n  walletIndex: number\n  spender: Address\n  sender: Address\n  feeOptionKey?: FeeOptionKey\n  amount?: BaseAmount\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import axios from 'axios'\nimport { AddressInfo, TransactionInfo, TransactionOperation } from './types'\n\n/**\n * Get address information.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-address-info\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} address\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {AddressInfo} The address information.\n */\nexport const getAddress = async (baseUrl: string, address: string, apiKey?: string): Promise<AddressInfo> => {\n  try {\n    const response = await axios.get(`${baseUrl}/getAddressInfo/${address}`, {\n      params: {\n        apiKey: apiKey || 'freekey',\n      },\n    })\n    return response.data\n  } catch (error) {\n    return Promise.reject(error)\n  }\n}\n\n/**\n * Get transaction by hash.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-transaction-info\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} hash The transaction hash.\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {Transactions} The transaction result.\n */\nexport const getTxInfo = async (baseUrl: string, hash: string, apiKey?: string): Promise<TransactionInfo> => {\n  try {\n    const response = await axios.get(`${baseUrl}/getTxInfo/${hash}`, {\n      params: {\n        apiKey: apiKey || 'freekey',\n      },\n    })\n    return response.data\n  } catch (error) {\n    return Promise.reject(error)\n  }\n}\n\n/**\n * Get ETH transactions.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-address-transactions\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} address The transaction hash.\n * @param {number} limit The maximum number of transactions.\n * @param {number} timestamp The start timestamp.\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {Transactions} The transaction result.\n */\nexport const getAddressTransactions = async (\n  baseUrl: string,\n  address: string,\n  limit?: number,\n  timestamp?: number,\n  apiKey?: string,\n): Promise<TransactionInfo[]> => {\n  try {\n    const response = await axios.get(`${baseUrl}/getAddressTransactions/${address}`, {\n      params: {\n        apiKey: apiKey || 'freekey',\n        limit,\n        timestamp,\n      },\n    })\n    return response.data\n  } catch (error) {\n    return Promise.reject(error)\n  }\n}\n\n/**\n * Get token transactions.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-last-address-operations\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} address The transaction hash.\n * @param {string} token The token address.\n * @param {number} limit The maximum number of transactions.\n * @param {number} timestamp The start timestamp.\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {Transactions} The transaction result.\n */\nexport const getAddressHistory = async (\n  baseUrl: string,\n  address: string,\n  token: string,\n  limit?: number,\n  timestamp?: number,\n  apiKey?: string,\n): Promise<TransactionOperation[]> => {\n  try {\n    const response = await axios.get(`${baseUrl}/getAddressHistory/${address}`, {\n      params: {\n        apiKey: apiKey || 'freekey',\n        token,\n        limit,\n        timestamp,\n        showZeroValues: true,\n        type: 'transfer',\n      },\n    })\n    return response.data.operations\n  } catch (error) {\n    return Promise.reject(error)\n  }\n}\n","import { Balances, Fees, Network as XChainNetwork, Tx } from '@xchainjs/xchain-client'\nimport {\n  Asset,\n  AssetETH,\n  assetFromString,\n  baseAmount,\n  ETHChain,\n  BaseAmount,\n  assetToString,\n  assetAmount,\n  assetToBase,\n} from '@xchainjs/xchain-util'\nimport { ethers, BigNumber, providers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport {\n  Network as EthNetwork,\n  Address,\n  ETHTransactionInfo,\n  TokenTransactionInfo,\n  FeesWithGasPricesAndLimits,\n  GasPrices,\n  TransactionOperation,\n  TransactionInfo,\n  TokenBalance,\n} from './types'\nimport erc20ABI from './data/erc20.json'\n\nexport const ETH_DECIMAL = 18\nexport const ETHPLORER_FREEKEY = 'freekey'\n\n// from https://github.com/MetaMask/metamask-extension/blob/ee205b893fe61dc4736efc576e0663189a9d23da/ui/app/pages/send/send.constants.js#L39\n// and based on recommendations of https://ethgasstation.info/blog/gas-limit/\nexport const SIMPLE_GAS_COST: ethers.BigNumber = BigNumber.from(21000)\nexport const BASE_TOKEN_GAS_COST: ethers.BigNumber = BigNumber.from(100000)\n\n// default gas price in gwei\nexport const DEFAULT_GAS_PRICE = 50\n\nexport const ETHAddress = '0x0000000000000000000000000000000000000000'\nexport const MAX_APPROVAL = BigNumber.from(2).pow(256).sub(1)\n\n/**\n * XChainNetwork -> EthNetwork\n *\n * @param {XChainNetwork} network\n * @returns {EthNetwork}\n */\nexport const xchainNetworkToEths = (network: XChainNetwork): EthNetwork => {\n  switch (network) {\n    // DO NOT use switch/case's default branch\n    // to be sure that ALL possible cases are\n    // processed in a similar way to reverted ethNetworkToXchains\n    case 'mainnet':\n      return EthNetwork.MAIN\n    case 'testnet':\n      return EthNetwork.TEST\n  }\n}\n\n/**\n * EthNetwork -> XChainNetwork\n *\n * @param {EthNetwork} network\n * @returns {XChainNetwork}\n */\nexport const ethNetworkToXchains = (network: EthNetwork): XChainNetwork => {\n  switch (network) {\n    // DO NOT use switch/case's default branch\n    // to be sure that ALL possible cases are\n    // processed in a similar way to reverted xchainNetworkToEths\n    case EthNetwork.MAIN:\n      return 'mainnet'\n    case EthNetwork.TEST:\n      return 'testnet'\n  }\n}\n\n/**\n * Validate the given address.\n *\n * @param {Address} address\n * @returns {boolean} `true` or `false`\n */\nexport const validateAddress = (address: Address): boolean => {\n  try {\n    ethers.utils.getAddress(address)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n/**\n * Get token address from asset.\n *\n * @param {Asset} asset\n * @returns {string|null} The token address.\n */\nexport const getTokenAddress = (asset: Asset): string | null => {\n  try {\n    // strip 0X only - 0x is still valid\n    return ethers.utils.getAddress(asset.symbol.slice(asset.ticker.length + 1).replace(/^0X/, ''))\n  } catch (err) {\n    return null\n  }\n}\n\n/**\n * Check if the symbol is valid.\n *\n * @param {string|null|undefined} symbol\n * @returns {boolean} `true` or `false`.\n */\nexport const validateSymbol = (symbol?: string | null): boolean => (symbol ? symbol.length >= 3 : false)\n\n/**\n * Get transactions from token tx\n *\n * @param {TokenTransactionInfo} tx\n * @returns {Tx|null} The parsed transaction.\n */\nexport const getTxFromTokenTransaction = (tx: TokenTransactionInfo): Tx | null => {\n  const decimals = parseInt(tx.tokenDecimal) || ETH_DECIMAL\n  const symbol = tx.tokenSymbol\n  const address = tx.contractAddress\n  if (validateSymbol(symbol) && validateAddress(address)) {\n    const tokenAsset = assetFromString(`${ETHChain}.${symbol}-${address}`)\n    if (tokenAsset) {\n      return {\n        asset: tokenAsset,\n        from: [\n          {\n            from: tx.from,\n            amount: baseAmount(tx.value, decimals),\n          },\n        ],\n        to: [\n          {\n            to: tx.to,\n            amount: baseAmount(tx.value, decimals),\n          },\n        ],\n        date: new Date(parseInt(tx.timeStamp) * 1000),\n        type: 'transfer',\n        hash: tx.hash,\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Get transactions from ETH transaction\n *\n * @param {ETHTransactionInfo} tx\n * @returns {Tx} The parsed transaction.\n */\nexport const getTxFromEthTransaction = (tx: ETHTransactionInfo): Tx => {\n  return {\n    asset: AssetETH,\n    from: [\n      {\n        from: tx.from,\n        amount: baseAmount(tx.value, ETH_DECIMAL),\n      },\n    ],\n    to: [\n      {\n        to: tx.to,\n        amount: baseAmount(tx.value, ETH_DECIMAL),\n      },\n    ],\n    date: new Date(parseInt(tx.timeStamp) * 1000),\n    type: 'transfer',\n    hash: tx.hash,\n  }\n}\n\n/**\n * Get transactions from operation\n *\n * @param {TransactionOperation} operation\n * @returns {Tx|null} The parsed transaction.\n */\nexport const getTxFromEthplorerTokenOperation = (operation: TransactionOperation): Tx | null => {\n  const decimals = parseInt(operation.tokenInfo.decimals) || ETH_DECIMAL\n  const { symbol, address } = operation.tokenInfo\n  if (validateSymbol(symbol) && validateAddress(address)) {\n    const tokenAsset = assetFromString(`${ETHChain}.${symbol}-${address}`)\n    if (tokenAsset) {\n      return {\n        asset: tokenAsset,\n        from: [\n          {\n            from: operation.from,\n            amount: baseAmount(operation.value, decimals),\n          },\n        ],\n        to: [\n          {\n            to: operation.to,\n            amount: baseAmount(operation.value, decimals),\n          },\n        ],\n        date: new Date(operation.timestamp * 1000),\n        type: operation.type === 'transfer' ? 'transfer' : 'unknown',\n        hash: operation.transactionHash,\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Get transactions from ETH transaction\n *\n * @param {TransactionInfo} txInfo\n * @returns {Tx} The parsed transaction.\n */\nexport const getTxFromEthplorerEthTransaction = (txInfo: TransactionInfo): Tx => {\n  return {\n    asset: AssetETH,\n    from: [\n      {\n        from: txInfo.from,\n        amount: assetToBase(assetAmount(txInfo.value, ETH_DECIMAL)),\n      },\n    ],\n    to: [\n      {\n        to: txInfo.to,\n        amount: assetToBase(assetAmount(txInfo.value, ETH_DECIMAL)),\n      },\n    ],\n    date: new Date(txInfo.timestamp * 1000),\n    type: 'transfer',\n    hash: txInfo.hash,\n  }\n}\n\n/**\n * Calculate fees by multiplying .\n *\n * @returns {Fees} The default gas price.\n */\nexport const getFee = ({ gasPrice, gasLimit }: { gasPrice: BaseAmount; gasLimit: BigNumber }) =>\n  baseAmount(gasPrice.amount().multipliedBy(gasLimit.toString()), ETH_DECIMAL)\n\nexport const estimateDefaultFeesWithGasPricesAndLimits = (asset?: Asset): FeesWithGasPricesAndLimits => {\n  const gasPrices = {\n    average: baseAmount(parseUnits(DEFAULT_GAS_PRICE.toString(), 'gwei').toString(), ETH_DECIMAL),\n    fast: baseAmount(parseUnits((DEFAULT_GAS_PRICE * 2).toString(), 'gwei').toString(), ETH_DECIMAL),\n    fastest: baseAmount(parseUnits((DEFAULT_GAS_PRICE * 3).toString(), 'gwei').toString(), ETH_DECIMAL),\n  }\n  const { fast: fastGP, fastest: fastestGP, average: averageGP } = gasPrices\n\n  let assetAddress\n  if (asset && assetToString(asset) !== assetToString(AssetETH)) {\n    assetAddress = getTokenAddress(asset)\n  }\n\n  let gasLimit\n  if (assetAddress && assetAddress !== ETHAddress) {\n    gasLimit = BigNumber.from(BASE_TOKEN_GAS_COST)\n  } else {\n    gasLimit = BigNumber.from(SIMPLE_GAS_COST)\n  }\n\n  return {\n    gasPrices,\n    gasLimit,\n    fees: {\n      type: 'byte',\n      average: getFee({ gasPrice: averageGP, gasLimit }),\n      fast: getFee({ gasPrice: fastGP, gasLimit }),\n      fastest: getFee({ gasPrice: fastestGP, gasLimit }),\n    },\n  }\n}\n\n/**\n * Get the default fees.\n *\n * @returns {Fees} The default gas price.\n */\nexport const getDefaultFees = (asset?: Asset): Fees => {\n  const { fees } = estimateDefaultFeesWithGasPricesAndLimits(asset)\n  return fees\n}\n\n/**\n * Get the default gas price.\n *\n * @returns {Fees} The default gas prices.\n */\nexport const getDefaultGasPrices = (asset?: Asset): GasPrices => {\n  const { gasPrices } = estimateDefaultFeesWithGasPricesAndLimits(asset)\n  return gasPrices\n}\n\n/**\n * Get address prefix based on the network.\n *\n * @returns {string} The address prefix based on the network.\n *\n **/\nexport const getPrefix = () => '0x'\n\n/**\n * Filter self txs\n *\n * @returns {T[]}\n *\n **/\nexport const filterSelfTxs = <T extends { from: string; to: string; hash: string }>(txs: T[]): T[] => {\n  const filterTxs = txs.filter((tx) => tx.from !== tx.to)\n  let selfTxs = txs.filter((tx) => tx.from === tx.to)\n  while (selfTxs.length) {\n    const selfTx = selfTxs[0]\n    filterTxs.push(selfTx)\n    selfTxs = selfTxs.filter((tx) => tx.hash !== selfTx.hash)\n  }\n\n  return filterTxs\n}\n\n/**\n * Get Decimals\n *\n * @param {Asset} asset\n * @returns {Number} the decimal of a given asset\n *\n * @throws {\"Invalid asset\"} Thrown if the given asset is invalid\n * @throws {\"Invalid provider\"} Thrown if the given provider is invalid\n */\nexport const getDecimal = async (asset: Asset, provider: providers.Provider): Promise<number> => {\n  if (assetToString(asset) === assetToString(AssetETH)) {\n    return Promise.resolve(ETH_DECIMAL)\n  }\n\n  const assetAddress = getTokenAddress(asset)\n  if (!assetAddress) {\n    throw new Error(`Invalid asset ${assetToString(asset)}`)\n  }\n\n  try {\n    const contract: ethers.Contract = new ethers.Contract(assetAddress, erc20ABI, provider)\n    const decimal: ethers.BigNumberish = await contract.decimals()\n\n    return ethers.BigNumber.from(decimal).toNumber()\n  } catch (err) {\n    throw new Error(`Invalid provider: ${err}`)\n  }\n}\n\n/**\n * Get Token Balances\n *\n * @param {Array<TokenBalance>} tokenBalances\n * @returns {Array<Balance>} the parsed balances\n *\n */\nexport const getTokenBalances = (tokenBalances: TokenBalance[]): Balances => {\n  return tokenBalances.reduce((acc, cur) => {\n    const { symbol, address: tokenAddress } = cur.tokenInfo\n    if (validateSymbol(symbol) && validateAddress(tokenAddress) && cur?.tokenInfo?.decimals !== undefined) {\n      const decimals = parseInt(cur.tokenInfo.decimals, 10)\n      const tokenAsset = assetFromString(`${ETHChain}.${symbol}-${ethers.utils.getAddress(tokenAddress)}`)\n      if (tokenAsset) {\n        return [\n          ...acc,\n          {\n            asset: tokenAsset,\n            amount: baseAmount(cur.balance, decimals),\n          },\n        ]\n      }\n    }\n\n    return acc\n  }, [] as Balances)\n}\n","import axios from 'axios'\nimport {\n  GasOracleResponse,\n  TransactionHistoryParam,\n  ETHTransactionInfo,\n  TokenTransactionInfo,\n  TokenBalanceParam,\n} from './types'\nimport { BigNumberish } from 'ethers'\nimport { Txs } from '@xchainjs/xchain-client/lib'\nimport { filterSelfTxs, getTxFromEthTransaction, getTxFromTokenTransaction } from './utils'\nimport { bnOrZero } from '@xchainjs/xchain-util/lib'\n\nconst getApiKeyQueryParameter = (apiKey?: string): string => (!!apiKey ? `&apiKey=${apiKey}` : '')\n\n/**\n * SafeGasPrice, ProposeGasPrice And FastGasPrice returned in string-Gwei\n *\n * @see https://etherscan.io/apis#gastracker\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {GasOracleResponse} LastBlock, SafeGasPrice, ProposeGasPrice, FastGasPrice\n */\nexport const getGasOracle = (baseUrl: string, apiKey?: string): Promise<GasOracleResponse> => {\n  const url = baseUrl + '/api?module=gastracker&action=gasoracle'\n\n  return axios.get(url + getApiKeyQueryParameter(apiKey)).then((response) => response.data.result)\n}\n\n/**\n * Get token balance\n *\n * @see https://etherscan.io/apis#tokens\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} address The address.\n * @param {string} assetAddress The token contract address.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {BigNumberish} The token balance\n */\nexport const getTokenBalance = ({\n  baseUrl,\n  address,\n  assetAddress,\n  apiKey,\n}: TokenBalanceParam & { baseUrl: string; apiKey?: string }): Promise<BigNumberish> => {\n  const url = baseUrl + `/api?module=account&action=tokenbalance&contractaddress=${assetAddress}&address=${address}`\n\n  return axios.get(url + getApiKeyQueryParameter(apiKey)).then((response) => response.data.result)\n}\n\n/**\n * Get ETH transaction history\n *\n * @see https://etherscan.io/apis#accounts\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} address The address.\n * @param {TransactionHistoryParam} params The search options.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {Array<ETHTransactionInfo>} The ETH transaction history\n */\nexport const getETHTransactionHistory = async ({\n  baseUrl,\n  address,\n  page,\n  offset,\n  startblock,\n  endblock,\n  apiKey,\n}: TransactionHistoryParam & { baseUrl: string; apiKey?: string }): Promise<Txs> => {\n  let url = baseUrl + `/api?module=account&action=txlist&sort=desc` + getApiKeyQueryParameter(apiKey)\n  if (address) url += `&address=${address}`\n  if (offset) url += `&offset=${offset}`\n  if (page) url += `&page=${page}`\n  if (startblock) url += `&startblock=${startblock}`\n  if (endblock) url += `&endblock=${endblock}`\n\n  try {\n    const result = await axios.get(url).then((response) => response.data.result)\n    if (JSON.stringify(result).includes('Invalid API Key')) {\n      return Promise.reject(new Error('Invalid API Key'))\n    }\n    if (typeof result !== typeof []) {\n      throw new Error(result)\n    }\n\n    return filterSelfTxs<ETHTransactionInfo>(result)\n      .filter((tx) => !bnOrZero(tx.value).isZero())\n      .map(getTxFromEthTransaction)\n  } catch (error) {\n    return Promise.reject(error)\n  }\n}\n\n/**\n * Get token transaction history\n *\n * @see https://etherscan.io/apis#accounts\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} address The address.\n * @param {TransactionHistoryParam} params The search options.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {Array<Tx>} The token transaction history\n */\nexport const getTokenTransactionHistory = async ({\n  baseUrl,\n  address,\n  assetAddress,\n  page,\n  offset,\n  startblock,\n  endblock,\n  apiKey,\n}: TransactionHistoryParam & { baseUrl: string; apiKey?: string }): Promise<Txs> => {\n  let url = baseUrl + `/api?module=account&action=tokentx&sort=desc` + getApiKeyQueryParameter(apiKey)\n  if (address) url += `&address=${address}`\n  if (assetAddress) url += `&contractaddress=${assetAddress}`\n  if (offset) url += `&offset=${offset}`\n  if (page) url += `&page=${page}`\n  if (startblock) url += `&startblock=${startblock}`\n  if (endblock) url += `&endblock=${endblock}`\n\n  try {\n    const result = await axios.get(url).then((response) => response.data.result)\n    if (JSON.stringify(result).includes('Invalid API Key')) {\n      return Promise.reject(new Error('Invalid API Key'))\n    }\n\n    return filterSelfTxs<TokenTransactionInfo>(result)\n      .filter((tx) => !bnOrZero(tx.value).isZero())\n      .reduce((acc, cur) => {\n        const tx = getTxFromTokenTransaction(cur)\n        return tx ? [...acc, tx] : acc\n      }, [] as Txs)\n  } catch (error) {\n    return Promise.reject(error)\n  }\n}\n","import { ethers, BigNumberish, BigNumber, Wallet } from 'ethers'\nimport { Provider, TransactionResponse } from '@ethersproject/abstract-provider'\nimport { EtherscanProvider, getDefaultProvider } from '@ethersproject/providers'\n\nimport erc20ABI from './data/erc20.json'\nimport { toUtf8Bytes, parseUnits, HDNode } from 'ethers/lib/utils'\nimport {\n  GasOracleResponse,\n  Network as EthNetwork,\n  ExplorerUrl,\n  TxOverrides,\n  GasPrices,\n  FeesParams,\n  FeesWithGasPricesAndLimits,\n  InfuraCreds,\n  ApproveParams,\n} from './types'\nimport {\n  RootDerivationPaths,\n  Address,\n  Network as XChainNetwork,\n  Tx,\n  TxsPage,\n  XChainClient,\n  XChainClientParams,\n  TxParams,\n  TxHash,\n  Fees,\n  TxHistoryParams,\n  Balances,\n  Network,\n  FeeOptionKey,\n  FeesParams as XFeesParams,\n} from '@xchainjs/xchain-client'\nimport { AssetETH, baseAmount, BaseAmount, assetToString, Asset, delay } from '@xchainjs/xchain-util'\nimport * as Crypto from '@xchainjs/xchain-crypto'\nimport * as ethplorerAPI from './ethplorer-api'\nimport * as etherscanAPI from './etherscan-api'\nimport {\n  ETH_DECIMAL,\n  ethNetworkToXchains,\n  xchainNetworkToEths,\n  getTokenAddress,\n  validateAddress,\n  SIMPLE_GAS_COST,\n  BASE_TOKEN_GAS_COST,\n  getFee,\n  MAX_APPROVAL,\n  ETHAddress,\n  getDefaultGasPrices,\n  getTxFromEthplorerTokenOperation,\n  getTxFromEthplorerEthTransaction,\n  getTokenBalances,\n} from './utils'\n\n/**\n * Interface for custom Ethereum client\n */\nexport interface EthereumClient {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  call<T>(\n    walletIndex: number,\n    asset: Address,\n    abi: ethers.ContractInterface,\n    func: string,\n    params: Array<unknown>,\n  ): Promise<T>\n  estimateCall(\n    asset: Address,\n    abi: ethers.ContractInterface,\n    func: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params: Array<any>,\n  ): Promise<BigNumber>\n  estimateGasPrices(): Promise<GasPrices>\n  estimateGasLimit(params: FeesParams): Promise<BigNumber>\n  estimateFeesWithGasPricesAndLimits(params: FeesParams): Promise<FeesWithGasPricesAndLimits>\n\n  isApproved(spender: Address, sender: Address, amount: BaseAmount): Promise<boolean>\n  approve(\n    params: ApproveParams & {\n      feeOptionKey?: FeeOptionKey\n    },\n  ): Promise<TransactionResponse>\n}\n\nexport type EthereumClientParams = XChainClientParams & {\n  ethplorerUrl?: string\n  ethplorerApiKey?: string\n  explorerUrl?: ExplorerUrl\n  etherscanApiKey?: string\n  infuraCreds?: InfuraCreds\n}\n\n/**\n * Custom Ethereum client\n */\nexport default class Client implements XChainClient, EthereumClient {\n  private network: EthNetwork\n  private hdNode!: HDNode\n  private etherscanApiKey?: string\n  private explorerUrl: ExplorerUrl\n  private infuraCreds: InfuraCreds | undefined\n  private ethplorerUrl: string\n  private ethplorerApiKey: string\n  private rootDerivationPaths: RootDerivationPaths\n  private providers: Map<XChainNetwork, Provider> = new Map<XChainNetwork, Provider>()\n\n  /**\n   * Constructor\n   * @param {EthereumClientParams} params\n   */\n  constructor({\n    network = 'testnet',\n    ethplorerUrl = 'https://api.ethplorer.io',\n    ethplorerApiKey = 'freekey',\n    explorerUrl,\n    phrase = '',\n    rootDerivationPaths = {\n      mainnet: `m/44'/60'/0'/0/`,\n      testnet: `m/44'/60'/0'/0/`, // this is INCORRECT but makes the unit tests pass\n    },\n    etherscanApiKey,\n    infuraCreds,\n  }: EthereumClientParams) {\n    this.rootDerivationPaths = rootDerivationPaths\n    this.network = xchainNetworkToEths(network)\n    this.setPhrase(phrase)\n    this.infuraCreds = infuraCreds\n    this.etherscanApiKey = etherscanApiKey\n    this.ethplorerUrl = ethplorerUrl\n    this.ethplorerApiKey = ethplorerApiKey\n    this.explorerUrl = explorerUrl || this.getDefaultExplorerURL()\n    this.setupProviders()\n  }\n\n  /**\n   * Purge client.\n   *\n   * @returns {void}\n   */\n  purgeClient = (): void => {\n    this.hdNode = HDNode.fromMnemonic('')\n  }\n\n  /**\n   * Set/Update the explorer url.\n   *\n   * @param {string} url The explorer url.\n   * @returns {void}\n   */\n  setExplorerURL = (url: ExplorerUrl): void => {\n    this.explorerUrl = url\n  }\n\n  /**\n   * Get the current network.\n   *\n   * @returns {Network} The current network. (`mainnet` or `testnet`)\n   */\n  getNetwork = (): XChainNetwork => {\n    return ethNetworkToXchains(this.network)\n  }\n\n  /**\n   * Get the current address.\n   *\n   * @returns {Address} The current address.\n   *\n   * @throws {\"Phrase must be provided\"}\n   * Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.\n   */\n  getAddress = (index = 0): Address => {\n    if (index < 0) {\n      throw new Error('index must be greater than zero')\n    }\n    return this.hdNode.derivePath(this.getFullDerivationPath(index)).address.toLowerCase()\n  }\n\n  /**\n   * Get etherjs wallet interface.\n   *\n   * @returns {Wallet} The current etherjs wallet interface.\n   *\n   * @throws {\"Phrase must be provided\"}\n   * Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.\n   */\n  getWallet = (index = 0): ethers.Wallet => {\n    return new Wallet(this.hdNode.derivePath(this.getFullDerivationPath(index))).connect(this.getProvider())\n  }\n  setupProviders = (): void => {\n    if (this.infuraCreds) {\n      // Infura provider takes either a string of project id\n      // or an object of id and secret\n      const testnetProvider = this.infuraCreds.projectSecret\n        ? new ethers.providers.InfuraProvider(EthNetwork.TEST, this.infuraCreds)\n        : new ethers.providers.InfuraProvider(EthNetwork.TEST, this.infuraCreds.projectId)\n      const mainnetProvider = this.infuraCreds.projectSecret\n        ? new ethers.providers.InfuraProvider(EthNetwork.MAIN, this.infuraCreds)\n        : new ethers.providers.InfuraProvider(EthNetwork.MAIN, this.infuraCreds.projectId)\n      this.providers.set('testnet', testnetProvider)\n      this.providers.set('mainnet', mainnetProvider)\n    } else {\n      this.providers.set('testnet', getDefaultProvider(EthNetwork.TEST))\n      this.providers.set('mainnet', getDefaultProvider(EthNetwork.MAIN))\n    }\n  }\n\n  /**\n   * Get etherjs Provider interface.\n   *\n   * @returns {Provider} The current etherjs Provider interface.\n   */\n  getProvider = (): Provider => {\n    const net = ethNetworkToXchains(this.network)\n    return this.providers.get(net) || getDefaultProvider(net)\n  }\n\n  /**\n   * Get etherjs EtherscanProvider interface.\n   *\n   * @returns {EtherscanProvider} The current etherjs EtherscanProvider interface.\n   */\n  getEtherscanProvider = (): EtherscanProvider => {\n    return new EtherscanProvider(this.network, this.etherscanApiKey)\n  }\n\n  /**\n   * Get the explorer url.\n   *\n   * @returns {string} The explorer url for ethereum based on the current network.\n   */\n  getExplorerUrl = (): string => {\n    return this.getExplorerUrlByNetwork(this.getNetwork())\n  }\n\n  /**\n   * Get the explorer url.\n   *\n   * @returns {ExplorerUrl} The explorer url (both mainnet and testnet) for ethereum.\n   */\n  private getDefaultExplorerURL = (): ExplorerUrl => {\n    return {\n      testnet: 'https://ropsten.etherscan.io',\n      mainnet: 'https://etherscan.io',\n    }\n  }\n\n  /**\n   * Get the explorer url.\n   *\n   * @param {Network} network\n   * @returns {string} The explorer url for ethereum based on the network.\n   */\n  private getExplorerUrlByNetwork = (network: Network): string => {\n    return this.explorerUrl[network]\n  }\n\n  /**\n   * Get the explorer url for the given address.\n   *\n   * @param {Address} address\n   * @returns {string} The explorer url for the given address.\n   */\n  getExplorerAddressUrl = (address: Address): string => {\n    return `${this.getExplorerUrl()}/address/${address}`\n  }\n\n  /**\n   * Get the explorer url for the given transaction id.\n   *\n   * @param {string} txID\n   * @returns {string} The explorer url for the given transaction id.\n   */\n  getExplorerTxUrl = (txID: string): string => {\n    return `${this.getExplorerUrl()}/tx/${txID}`\n  }\n\n  /**\n   * Set/update the current network.\n   *\n   * @param {Network} network `mainnet` or `testnet`.\n   * @returns {void}\n   *\n   * @throws {\"Network must be provided\"}\n   * Thrown if network has not been set before.\n   */\n  setNetwork = (network: XChainNetwork): void => {\n    if (!network) {\n      throw new Error('Network must be provided')\n    } else {\n      this.network = xchainNetworkToEths(network)\n    }\n  }\n  /**\n   * Get getFullDerivationPath\n   *\n   * @param {number} index the HD wallet index\n   * @returns {string} The derivation path based on the network.\n   */\n  getFullDerivationPath(index: number): string {\n    return this.rootDerivationPaths[this.getNetwork()] + `${index}`\n  }\n  /**\n   * Set/update a new phrase (Eg. If user wants to change wallet)\n   *\n   * @param {string} phrase A new phrase.\n   * @returns {Address} The address from the given phrase\n   *\n   * @throws {\"Invalid phrase\"}\n   * Thrown if the given phase is invalid.\n   */\n  setPhrase = (phrase: string, walletIndex = 0): Address => {\n    if (!Crypto.validatePhrase(phrase)) {\n      throw new Error('Invalid phrase')\n    }\n    this.hdNode = HDNode.fromMnemonic(phrase)\n    return this.getAddress(walletIndex)\n  }\n\n  /**\n   * Validate the given address.\n   *\n   * @param {Address} address\n   * @returns {boolean} `true` or `false`\n   */\n  validateAddress = (address: Address): boolean => {\n    return validateAddress(address)\n  }\n\n  /**\n   * Get the ETH balance of a given address.\n   *\n   * @param {Address} address By default, it will return the balance of the current wallet. (optional)\n   * @returns {Array<Balances>} The all balance of the address.\n   *\n   * @throws {\"Invalid asset\"} throws when the give asset is an invalid one\n   */\n  getBalance = async (address: Address, assets?: Asset[]): Promise<Balances> => {\n    try {\n      const ethAddress = address || this.getAddress()\n      // get ETH balance directly from provider\n      const ethBalance: BigNumber = await this.getProvider().getBalance(ethAddress)\n      const ethBalanceAmount = baseAmount(ethBalance.toString(), ETH_DECIMAL)\n\n      if (this.getNetwork() === 'mainnet') {\n        // use ethplorerAPI for mainnet - ignore assets\n        const account = await ethplorerAPI.getAddress(this.ethplorerUrl, address, this.ethplorerApiKey)\n        const balances: Balances = [\n          {\n            asset: AssetETH,\n            amount: ethBalanceAmount,\n          },\n        ]\n\n        if (account.tokens) {\n          balances.push(...getTokenBalances(account.tokens))\n        }\n\n        return balances\n      } else {\n        // use etherscan for testnet\n\n        const newAssets = assets || [AssetETH]\n        // Follow approach is only for testnet\n        // For mainnet, we will use ethplorer api(one request only)\n        // https://github.com/xchainjs/xchainjs-lib/issues/252\n        // And to avoid etherscan api call limit, it gets balances in a sequence way, not in parallel\n        const balances = []\n        for (let i = 0; i < newAssets.length; i++) {\n          const asset = newAssets[i]\n          const etherscan = this.getEtherscanProvider()\n          if (assetToString(asset) !== assetToString(AssetETH)) {\n            // Handle token balances\n            const assetAddress = getTokenAddress(asset)\n            if (!assetAddress) {\n              throw new Error(`Invalid asset ${asset}`)\n            }\n            const balance = await etherscanAPI.getTokenBalance({\n              baseUrl: etherscan.baseUrl,\n              address,\n              assetAddress,\n              apiKey: etherscan.apiKey,\n            })\n            const decimals =\n              BigNumber.from(await this.call<BigNumberish>(0, assetAddress, erc20ABI, 'decimals', [])).toNumber() ||\n              ETH_DECIMAL\n\n            if (!Number.isNaN(decimals)) {\n              balances.push({\n                asset,\n                amount: baseAmount(balance.toString(), decimals),\n              })\n            }\n          } else {\n            balances.push({\n              asset: AssetETH,\n              amount: ethBalanceAmount,\n            })\n          }\n          // Due to etherscan api call limitation, put some delay before another call\n          // Free Etherscan api key limit: 5 calls per second\n          // So 0.3s delay is reasonable for now\n          await delay(300)\n        }\n\n        return balances\n      }\n    } catch (error) {\n      if (error.toString().includes('Invalid API Key')) {\n        return Promise.reject(new Error('Invalid API Key'))\n      }\n      return Promise.reject(error)\n    }\n  }\n\n  /**\n   * Get transaction history of a given address with pagination options.\n   * By default it will return the transaction history of the current wallet.\n   *\n   * @param {TxHistoryParams} params The options to get transaction history. (optional)\n   * @returns {TxsPage} The transaction history.\n   */\n  getTransactions = async (params?: TxHistoryParams): Promise<TxsPage> => {\n    try {\n      const offset = params?.offset || 0\n      const limit = params?.limit || 10\n      const assetAddress = params?.asset\n\n      const maxCount = 10000\n\n      let transations\n      const etherscan = this.getEtherscanProvider()\n\n      if (assetAddress) {\n        transations = await etherscanAPI.getTokenTransactionHistory({\n          baseUrl: etherscan.baseUrl,\n          address: params?.address,\n          assetAddress,\n          page: 0,\n          offset: maxCount,\n          apiKey: etherscan.apiKey,\n        })\n      } else {\n        transations = await etherscanAPI.getETHTransactionHistory({\n          baseUrl: etherscan.baseUrl,\n          address: params?.address,\n          page: 0,\n          offset: maxCount,\n          apiKey: etherscan.apiKey,\n        })\n      }\n\n      return {\n        total: transations.length,\n        txs: transations.filter((_, index) => index >= offset && index < offset + limit),\n      }\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  /**\n   * Get the transaction details of a given transaction id.\n   *\n   * @param {string} txId The transaction id.\n   * @param {string} assetAddress The asset address. (optional)\n   * @returns {Tx} The transaction details of the given transaction id.\n   *\n   * @throws {\"Need to provide valid txId\"}\n   * Thrown if the given txId is invalid.\n   */\n  getTransactionData = async (txId: string, assetAddress?: Address): Promise<Tx> => {\n    try {\n      if (this.getNetwork() === 'mainnet') {\n        // use ethplorerAPI for mainnet - ignore assetAddress\n        const txInfo = await ethplorerAPI.getTxInfo(this.ethplorerUrl, txId, this.ethplorerApiKey)\n\n        if (txInfo.operations && txInfo.operations.length > 0) {\n          const tx = getTxFromEthplorerTokenOperation(txInfo.operations[0])\n          if (!tx) {\n            throw new Error('Could not parse transaction data')\n          }\n\n          return tx\n        } else {\n          return getTxFromEthplorerEthTransaction(txInfo)\n        }\n      } else {\n        let tx\n        const etherscan = this.getEtherscanProvider()\n        const txInfo = await etherscan.getTransaction(txId)\n        if (txInfo) {\n          if (assetAddress) {\n            tx =\n              (\n                await etherscanAPI.getTokenTransactionHistory({\n                  baseUrl: etherscan.baseUrl,\n                  assetAddress,\n                  startblock: txInfo.blockNumber,\n                  endblock: txInfo.blockNumber,\n                  apiKey: etherscan.apiKey,\n                })\n              ).filter((info) => info.hash === txId)[0] ?? null\n          } else {\n            tx =\n              (\n                await etherscanAPI.getETHTransactionHistory({\n                  baseUrl: etherscan.baseUrl,\n                  startblock: txInfo.blockNumber,\n                  endblock: txInfo.blockNumber,\n                  apiKey: etherscan.apiKey,\n                  address: txInfo.from,\n                })\n              ).filter((info) => info.hash === txId)[0] ?? null\n          }\n        }\n\n        if (!tx) {\n          throw new Error('Could not get transaction history')\n        }\n\n        return tx\n      }\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  /**\n   * Call a contract function.\n   * @template T The result interface.\n   * @param {Address} address The contract address.\n   * @param {ContractInterface} abi The contract ABI json.\n   * @param {string} func The function to be called.\n   * @param {Array<any>} params The parameters of the function.\n   * @returns {T} The result of the contract function call.\n   *\n   * @throws {\"address must be provided\"}\n   * Thrown if the given contract address is empty.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  call = async <T>(\n    walletIndex = 0,\n    contractAddress: Address,\n    abi: ethers.ContractInterface,\n    func: string,\n    params: Array<unknown>,\n  ): Promise<T> => {\n    if (!contractAddress) {\n      return Promise.reject(new Error('contractAddress must be provided'))\n    }\n    const contract = new ethers.Contract(contractAddress, abi, this.getProvider()).connect(this.getWallet(walletIndex))\n    return contract[func](...params)\n  }\n\n  /**\n   * Call a contract function.\n   * @param {Address} address The contract address.\n   * @param {ContractInterface} abi The contract ABI json.\n   * @param {string} func The function to be called.\n   * @param {Array<any>} params The parameters of the function.\n   * @returns {BigNumber} The result of the contract function call.\n   *\n   * @throws {\"address must be provided\"}\n   * Thrown if the given contract address is empty.\n   */\n  estimateCall = async (\n    contractAddress: Address,\n    abi: ethers.ContractInterface,\n    func: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params: Array<any>,\n  ): Promise<BigNumber> => {\n    if (!contractAddress) {\n      return Promise.reject(new Error('contractAddress must be provided'))\n    }\n    const contract = new ethers.Contract(contractAddress, abi, this.getProvider()).connect(this.getWallet(0))\n    return contract.estimateGas[func](...params)\n  }\n\n  /**\n   * Check allowance.\n   *\n   * @param {Address} spender The spender address.\n   * @param {Address} sender The sender address.\n   * @param {BaseAmount} amount The amount of token.\n   * @returns {boolean} `true` or `false`.\n   */\n  isApproved = async (spender: Address, sender: Address, amount: BaseAmount): Promise<boolean> => {\n    try {\n      const txAmount = BigNumber.from(amount.amount().toFixed())\n      const allowance = await this.call<BigNumberish>(0, sender, erc20ABI, 'allowance', [spender, spender])\n      return txAmount.lte(allowance)\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  /**\n   * Check allowance.\n   *\n   * @param {number} walletIndex which wallet to use to make the call\n   * @param {Address} spender The spender index.\n   * @param {Address} sender The sender address.\n   * @param {feeOptionKey} FeeOptionKey Fee option (optional)\n   * @param {BaseAmount} amount The amount of token. By default, it will be unlimited token allowance. (optional)\n   * @returns {TransactionResponse} The transaction result.\n   */\n  approve = async ({\n    walletIndex = 0,\n    spender,\n    sender,\n    feeOptionKey,\n    amount,\n  }: ApproveParams): Promise<TransactionResponse> => {\n    const gasPrice =\n      feeOptionKey &&\n      BigNumber.from(\n        (\n          await this.estimateGasPrices()\n            .then((prices) => prices[feeOptionKey])\n            .catch(() => getDefaultGasPrices()[feeOptionKey])\n        )\n          .amount()\n          .toFixed(),\n      )\n    const gasLimit = await this.estimateApprove({ spender, sender, amount }).catch(() => undefined)\n\n    try {\n      const txAmount = amount ? BigNumber.from(amount.amount().toFixed()) : MAX_APPROVAL\n      const txResult = await this.call<TransactionResponse>(walletIndex, sender, erc20ABI, 'approve', [\n        spender,\n        txAmount,\n        { from: this.getAddress(), gasPrice, gasLimit },\n      ])\n\n      return txResult\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  /**\n   * Estimate gas limit of approve.\n   *\n   * @param {Address} spender The spender address.\n   * @param {Address} sender The sender address.\n   * @param {BaseAmount} amount The amount of token. By default, it will be unlimited token allowance. (optional)\n   * @returns {BigNumber} The estimated gas limit.\n   */\n  estimateApprove = async ({\n    spender,\n    sender,\n    amount,\n  }: Omit<ApproveParams, 'feeOptionKey' | 'walletIndex'>): Promise<BigNumber> => {\n    try {\n      const txAmount = amount ? BigNumber.from(amount.amount().toFixed()) : MAX_APPROVAL\n      const gasLimit = await this.estimateCall(sender, erc20ABI, 'approve', [\n        spender,\n        txAmount,\n        { from: this.getAddress() },\n      ])\n\n      return gasLimit\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  /**\n   * Transfer ETH.\n   *\n   * @param {TxParams} params The transfer options.\n   * @param {feeOptionKey} FeeOptionKey Fee option (optional)\n   * @param {gasPrice} BaseAmount Gas price (optional)\n   * @param {gasLimit} BigNumber Gas limit (optional)\n   *\n   * A given `feeOptionKey` wins over `gasPrice` and `gasLimit`\n   *\n   * @returns {TxHash} The transaction hash.\n   *\n   * @throws {\"Invalid asset address\"}\n   * Thrown if the given asset is invalid.\n   */\n  transfer = async ({\n    walletIndex = 0,\n    asset,\n    memo,\n    amount,\n    recipient,\n    feeOptionKey,\n    gasPrice,\n    gasLimit,\n  }: TxParams & {\n    feeOptionKey?: FeeOptionKey\n    gasPrice?: BaseAmount\n    gasLimit?: BigNumber\n  }): Promise<TxHash> => {\n    try {\n      const txAmount = BigNumber.from(amount.amount().toFixed())\n\n      let assetAddress\n      if (asset && assetToString(asset) !== assetToString(AssetETH)) {\n        assetAddress = getTokenAddress(asset)\n      }\n\n      const isETHAddress = assetAddress === ETHAddress\n\n      // feeOptionKey\n\n      const defaultGasLimit: ethers.BigNumber = isETHAddress ? SIMPLE_GAS_COST : BASE_TOKEN_GAS_COST\n\n      let overrides: TxOverrides = {\n        gasLimit: gasLimit || defaultGasLimit,\n        gasPrice: gasPrice && BigNumber.from(gasPrice.amount().toFixed()),\n      }\n\n      // override `overrides` if `feeOptionKey` is provided\n      if (feeOptionKey) {\n        const gasPrice = await this.estimateGasPrices()\n          .then((prices) => prices[feeOptionKey])\n          .catch(() => getDefaultGasPrices()[feeOptionKey])\n        const gasLimit = await this.estimateGasLimit({ asset, recipient, amount, memo }).catch(() => defaultGasLimit)\n\n        overrides = {\n          gasLimit,\n          gasPrice: BigNumber.from(gasPrice.amount().toFixed()),\n        }\n      }\n\n      let txResult\n      if (assetAddress && !isETHAddress) {\n        // Transfer ERC20\n        txResult = await this.call<TransactionResponse>(walletIndex, assetAddress, erc20ABI, 'transfer', [\n          recipient,\n          txAmount,\n          Object.assign({}, overrides),\n        ])\n      } else {\n        // Transfer ETH\n        const transactionRequest = Object.assign(\n          { to: recipient, value: txAmount },\n          {\n            ...overrides,\n            data: memo ? toUtf8Bytes(memo) : undefined,\n          },\n        )\n\n        txResult = await this.getWallet().sendTransaction(transactionRequest)\n      }\n\n      return txResult.hash\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n\n  /**\n   * Estimate gas price.\n   * @see https://etherscan.io/apis#gastracker\n   *\n   * @returns {GasPrices} The gas prices (average, fast, fastest) in `Wei` (`BaseAmount`)\n   *\n   * @throws {\"Failed to estimate gas price\"} Thrown if failed to estimate gas price.\n   */\n  estimateGasPrices = async (): Promise<GasPrices> => {\n    try {\n      const etherscan = this.getEtherscanProvider()\n      const response: GasOracleResponse = await etherscanAPI.getGasOracle(etherscan.baseUrl, etherscan.apiKey)\n\n      // Convert result of gas prices: `Gwei` -> `Wei`\n      const averageWei = parseUnits(response.SafeGasPrice, 'gwei')\n      const fastWei = parseUnits(response.ProposeGasPrice, 'gwei')\n      const fastestWei = parseUnits(response.FastGasPrice, 'gwei')\n\n      return {\n        average: baseAmount(averageWei.toString(), ETH_DECIMAL),\n        fast: baseAmount(fastWei.toString(), ETH_DECIMAL),\n        fastest: baseAmount(fastestWei.toString(), ETH_DECIMAL),\n      }\n    } catch (error) {\n      return Promise.reject(new Error(`Failed to estimate gas price: ${error.msg ?? error.toString()}`))\n    }\n  }\n\n  /**\n   * Estimate gas.\n   *\n   * @param {FeesParams} params The transaction options.\n   * @returns {BaseAmount} The estimated gas fee.\n   *\n   * @throws {\"Failed to estimate gas limit\"} Thrown if failed to estimate gas limit.\n   */\n  estimateGasLimit = async ({ asset, recipient, amount, memo }: FeesParams): Promise<BigNumber> => {\n    try {\n      const txAmount = BigNumber.from(amount.amount().toFixed())\n\n      let assetAddress\n      if (asset && assetToString(asset) !== assetToString(AssetETH)) {\n        assetAddress = getTokenAddress(asset)\n      }\n\n      let estimate\n\n      if (assetAddress && assetAddress !== ETHAddress) {\n        // ERC20 gas estimate\n        const contract = new ethers.Contract(assetAddress, erc20ABI, this.getProvider())\n\n        estimate = await contract.estimateGas.transfer(recipient, txAmount, {\n          from: this.getAddress(),\n        })\n      } else {\n        // ETH gas estimate\n        const transactionRequest = {\n          from: this.getAddress(),\n          to: recipient,\n          value: txAmount,\n          data: memo ? toUtf8Bytes(memo) : undefined,\n        }\n\n        estimate = await this.getProvider().estimateGas(transactionRequest)\n      }\n\n      return estimate\n    } catch (error) {\n      return Promise.reject(new Error(`Failed to estimate gas limit: ${error.msg ?? error.toString()}`))\n    }\n  }\n\n  /**\n   * Estimate gas prices/limits (average, fast fastest).\n   *\n   * @param {FeesParams} params\n   * @returns {FeesWithGasPricesAndLimits} The estimated gas prices/limits.\n   *\n   * @throws {\"Failed to estimate fees, gas price, gas limit\"} Thrown if failed to estimate fees, gas price, gas limit.\n   */\n  estimateFeesWithGasPricesAndLimits = async (params: FeesParams): Promise<FeesWithGasPricesAndLimits> => {\n    try {\n      // gas prices\n      const gasPrices = await this.estimateGasPrices()\n      const { fast: fastGP, fastest: fastestGP, average: averageGP } = gasPrices\n\n      // gas limits\n      const gasLimit = await this.estimateGasLimit({\n        asset: params.asset,\n        amount: params.amount,\n        recipient: params.recipient,\n        memo: params.memo,\n      })\n\n      return {\n        gasPrices,\n        fees: {\n          type: 'byte',\n          average: getFee({ gasPrice: averageGP, gasLimit }),\n          fast: getFee({ gasPrice: fastGP, gasLimit }),\n          fastest: getFee({ gasPrice: fastestGP, gasLimit }),\n        },\n        gasLimit,\n      }\n    } catch (error) {\n      return Promise.reject(\n        new Error(`Failed to estimate fees, gas price, gas limit: ${error.msg ?? error.toString()}`),\n      )\n    }\n  }\n\n  /**\n   * Get fees.\n   *\n   * @param {FeesParams} params\n   * @returns {Fees} The average/fast/fastest fees.\n   *\n   * @throws {\"Failed to get fees\"} Thrown if failed to get fees.\n   */\n  getFees = async (params: XFeesParams & FeesParams): Promise<Fees> => {\n    if (!params) return Promise.reject('Params need to be passed')\n\n    try {\n      const { fees } = await this.estimateFeesWithGasPricesAndLimits(params)\n      return fees\n    } catch (error) {\n      return Promise.reject(new Error(`Failed to get fees: ${error.msg ?? error.toString()}`))\n    }\n  }\n}\n\nexport { Client }\n"],"names":["Network","axios","BigNumber","EthNetwork","ethers","assetFromString","ETHChain","baseAmount","AssetETH","assetToBase","assetAmount","parseUnits","assetToString","bnOrZero","HDNode","Wallet","getDefaultProvider","EtherscanProvider","Crypto.validatePhrase","ethplorerAPI.getAddress","etherscanAPI.getTokenBalance","delay","etherscanAPI.getTokenTransactionHistory","etherscanAPI.getETHTransactionHistory","ethplorerAPI.getTxInfo","toUtf8Bytes","etherscanAPI.getGasOracle"],"mappings":"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"}